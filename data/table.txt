
# Instruction table.
# ------------------------------------------------------------------- #
# Every line in this file represents an instruction. Empty lines and
# lines startingwith the # symbol are to be ignored. Instructions have
# the following format:
#     <opcode> <bits...>

# <opcode> specifies the name of the instruction.
# <bits...> specify the bits to be matched/stored as parameters to the
# decoder.

# Colons can be used to visually separate bytes of the instruction.

# Instruction opcodes
# ------------------------------------------------------------------- #
# Some instructions don't have a complete opcode on them. The list
# below specifies such instructions
#   j    - Jcc
#   cmov - CMOVcc
#   c    - CWD, CDQ
# The way they are meant to be interpreted is that the actual opcode
# is constructed by appending suffixes to the opcode based on the
# combination of opcode encoding and encoding flags.
# If the instruction has `tttt` field, it gets condition code appended
# to the opcode.
# If the instruction encoding has `+ds` flag, it gets its data size
# appended to its name. CWD/CDQ are special instructions that also
# append double the data size to their name.

# Opcode encoding
# ------------------------------------------------------------------- #
# <binary number> - specifies a string of bits that must be matched
# in the opcode exactly.
# <dashes> - specifies a group of bits to be ignored. The number of
# dashes specifies the number of bits to be ignored.
# d - 1 bit direction bit.
# w - 1 bitwidth bit.
# tttt - 4-bit test bits field. Note that the test bits are supposed
#        to be appended to the opcode of the instruction.
#        i.e. `Jcc` is specified as `j`.
# rrr - 3-bit opcode reg field.
# eee - 3-bit control register field.
# ddd - 3-bit debug register field.
# sss - 3-bit segment register field (includes GS and FS)
# ss  - 2-bit segment register field (doesn't include GS and FS)
# gg  - 2-bit granularity field. Just like tttt it's appended to the
#       opcode.

# Mod/RM encoding
# ------------------------------------------------------------------- #
# mod - 2-bit mod field of the mod/rm byte.
# moda - mod field that is not 11.
# modb - mod field that is not 10 nor 01.
# modab - mod field that is expected to be 00.
# rx  - 3-bit reg field of the mod/rm byte.
# rm  - 3-bit rm field of the mod/rm byte.
# mmxrx - 3-bit mmx register encoding in the reg field.

# Implicit operands
# ------------------------------------------------------------------- #
# Implicit operands do not appear in the opcode but rather provide
# information aboutwhat an opcode means.
# 
# _d   - implicit d-bit with value 0.
# _64  - implicit force 64-bit operand size.
# _a   - implicit AL/AX/EAX register.
# _c   - implicit CL/CX/ECX register.
# _1   - implicit constant 1 operand.

# "Immediate" Bytes
# ------------------------------------------------------------------- #
# imm - immediate parameter, size depends on current data size.
# imm8 - 8-bit immediate parameter.
# imm16 - 16-bit immediate parameter.
# disp - displacement parameter, size depends on current addr size.
# disp8 - 8-bit displacement from the next instruction
# sel  - segment selector, a 2 byte value following disp.

# Encoding flags
# ------------------------------------------------------------------- #
# +n64 - do not decode on 64-bit platforms
# +ncs - do not decode if cr2 or cr3 field turned out to be cs
# +ds  - data size is part of instruction name (movs -> movsb/movsw/movsl/movsq)

# ------------------------------------------------------------------- #
# General purpose instruction formats and encodings.
# ------------------------------------------------------------------- #

add     000000dw : mod rx rm
add     0000010w : _a imm
or      0000100w : mod rx rm
or      0000110w : _a imm
push    000ss110
pop     000ss111
adc     000100dw : mod rx rm
adc     0001010w : _a imm
sbb     000110dw : mod rx rm
sbb     0001110w : _a imm
and     001000dw : mod rx rm
and     0010010w : _a imm
daa     00100111
sub     001010dw : mod rx rm
sub     0010110w : _a imm
das     00101111
xor     001100dw : mod rx rm
xor     0011010w : imm
aaa     00110111
cmp     001110dw : mod rx rm
cmp     0011110w : imm
aas     00111111
inc     01000rrr : +n64
dec     01001rrr : +n64
push    01010rrr
pop     01011rrr
pusha   01100000
popa    01100001
bound   01100010 : moda rx rm
arpl    01100011 : mod rx rm
push    011010s0 : imm
imul    011010s1 : mod rx rm : imm
ins     0110110w
outs    0110111w
j       0111tttt : disp8
add     100000sw : mod 000 rm : imm
or      100000sw : mod 001 rm : imm
adc     100000sw : mod 010 rm : imm
sbb     100000sw : mod 011 rm : imm
and     100000sw : mod 100 rm : imm
sub     100000sw : mod 101 rm : imm
xor     100000sw : mod 110 rm : imm
cmp     100000sw : mod 111 rm : imm
test    1000010w : mod rx rm
xchg    1000011w : mod rx rm
mov     100010dw : mod rx rm
mov     10001100 : mod sss rm : _d
lea     10001101 : moda rx rm
mov     10001110 : mod sss rm
pop     10001111 : mod 000 rm
nop     10010000
xchg    10010rrr : _a
cbw     10011000
cwde    10011000
c       10011001 : +ds
call    10011010 : disp sel
wait    10011011
pushf   10011100
popf    10011101
sahf    10011110
lahf    10011111
mov     1010000w : _a disp
movs    1010010w : +ds
cmps    1010011w : +ds
test    1010100w : _a imm
stos    1010101w : +ds
lods    1010110w : +ds
scas    1010111w : +ds
mov     1011wrrr : imm
rol     1100000w : mod 000 rm : imm8
ror     1100000w : mod 001 rm : imm8
rcl     1100000w : mod 010 rm : imm8
rcr     1100000w : mod 011 rm : imm8
shl     1100000w : mod 100 rm : imm8
shr     1100000w : mod 101 rm : imm8
sar     1100000w : mod 111 rm : imm8
ret     11000010 : imm16
ret     11000011
les     11000100 : modab rx rm
lds     11000101 : modab rx rm
mov     1100011w : mod 000 rm : imm
leave   11001001
ret     11001010 : imm16
ret     11001011
int3    11001100
int     11001101 : imm8
into    11001110
iret    11001111
rol     1101000w : mod 000 rm : _1
ror     1101000w : mod 001 rm : _1
rcl     1101000w : mod 010 rm : _1
rcr     1101000w : mod 011 rm : _1
shl     1101000w : mod 100 rm : _1
shr     1101000w : mod 101 rm : _1
sar     1101000w : mod 111 rm : _1
rol     1101001w : mod 000 rm : _c _d
ror     1101001w : mod 001 rm : _c _d
rcl     1101001w : mod 010 rm : _c _d
rcr     1101001w : mod 011 rm : _c _d
shl     1101001w : mod 100 rm : _c _d
shr     1101001w : mod 101 rm : _c _d
sar     1101001w : mod 111 rm : _c _d
aam     11010100 : 00001010
aad     11010101 : 00001010
xlat    11010111
loopnz  11100000 : disp8
loopz   11100001 : disp8
loop    11100010 : disp8
jcxz    11100011 : disp8
in      1110010w : imm8
out     1110011w : imm8
call    11101000 : disp
jmp     11101001 : disp
jmp     11101011 : disp8
in      1110110w
out     1110111w
hlt     11110100
cmc     11110101
test    1111011w : mod 000 rm : imm
not     1111011w : mod 010 rm
imul    1111011w : mod 101 rm : _a
idiv    1111011w : mod 111 rm : _a
mul     1111011w : mod 100 rm : _a
clc     11111000
stc     11111001
cli     11111010
sti     11111011
cld     11111100
std     11111101
inc     1111111w : mod 000 rm
dec     1111111w : mod 001 rm
call    11111111 : mod 010 rm
call    11111111 : mod 011 rm
jmp     11111111 : mod 100 rm
push    11111111 : mod 110 rm

sldt    00001111 : 00000000 : mod 000 rm
str     00001111 : 00000000 : mod 001 rm
lldt    00001111 : 00000000 : mod 010 rm
ltr     00001111 : 00000000 : mod 011 rm
verr    00001111 : 00000000 : mod 100 rm
verw    00001111 : 00000000 : mod 101 rm
sgdt    00001111 : 00000001 : moda 000 rm
sidt    00001111 : 00000001 : moda 001 rm
lgdt    00001111 : 00000001 : moda 010 rm
lidt    00001111 : 00000001 : moda 011 rm
lmsw    00001111 : 00000001 : moda 110 rm
smsw    00001111 : 00000001 : moda 100 rm
invlpg  00001111 : 00000001 : moda 111 rm
rdtscp  00001111 : 00000001 : 11   111 001
lar     00001111 : 00000010 : mod rx rm
lsl     00001111 : 00000011 : mod rx rm
clts    00001111 : 00000110
wbinvd  00001111 : 00001001
ud2     00001111 : 00001011
invd    00001111 : 00001000
nop     00001111 : 00011111 : mod 000 rm
mov     00001111 : 00100000 : -- eee rrr : _64 _d
mov     00001111 : 00100001 : -- ddd rrr : _64 _d
mov     00001111 : 00100010 : -- eee rrr : _64
mov     00001111 : 00100011 : -- ddd rrr : _64
wrmsr   00001111 : 00110000
rdtsc   00001111 : 00110001
rdmsr   00001111 : 00110010
rdpmc   00001111 : 00110011
movbe   00001111 : 00111000 : 1111000 d : mod rx rm
push    00001111 : 10sss000
pop     00001111 : 10sss001 : +ncs
set     00001111 : 1001tttt : mod 000 rm
cpuid   00001111 : 10100010
bt      00001111 : 10100011 : mod rx rm
bts     00001111 : 10101011 : mod rx rm
imul    00001111 : 10101111 : mod rx rm
lss     00001111 : 10110010 : moda rx rm
btr     00001111 : 10110011 : mod rx rm
bt      00001111 : 10111010 : mod 100 rm : imm8
bts     00001111 : 10111010 : mod 101 rm : imm8
btr     00001111 : 10111010 : mod 110 rm : imm8
btc     00001111 : 10111010 : mod 111 rm : imm8
btc     00001111 : 10111011 : mod rx rm
bsf     00001111 : 10111100 : mod rx rm
bsr     00001111 : 10111101 : mod rx rm
movsx   00001111 : 1011111w : mod rx rm
xadd    00001111 : 1100000w : mod rx rm
bswap   00001111 : 11001rrr
rsm     00001111 : 10101010
shrd    00001111 : 10101100 : mod rx rm : imm8
shrd    00001111 : 10101101 : mod rx rm : _c
cmpxchg 00001111 : 1011000w : mod rx rm
movzx   00001111 : 1011011w : mod rx rm
lfs     00001111 : 10110100 : moda rx rm
lgs     00001111 : 10110101 : moda rx rm
ud1     00001111 : 10111001 : mod rx rm
ud0     00001111 : 11111111 : mod rx rm
invpcid 01100110 : 00001111 : 00111000 : 10000010 : mod rx rm


# TODO: rep prefix instructions (movs, scas)

# ------------------------------------------------------------------- #
# Pentium processor family instructions
# ------------------------------------------------------------------- #

cmpxchg8b 00001111 : 11000111 : mod 001 rm


# ------------------------------------------------------------------- #
# MMX instruction formats and encodings
# ------------------------------------------------------------------- #

emms     00001111 : 01110111
movd     00001111 : 011d1110 : 11 mmxrx rrr
movd     00001111 : 011d1110 : moda mmxrx rm
movq     00001111 : 011d1111 : 11 mmxrx rrr
movq     00001111 : 011d1111 : moda mmxrx rm
packsswb 00001111 : 01100011 : mod mmxrx rm
packuswb 00001111 : 01100111 : mod mmxrx rm
packssdw 00001111 : 01101011 : mod mmxrx rm
padd     00001111 : 111111gg : mod mmxrx rm
padds    00001111 : 111011gg : mod mmxrx rm
paddus   00001111 : 110111gg : mod mmxrx rm
pand     00001111 : 11011011 : mod mmxrx rm
pandn    00001111 : 11011111 : mod mmxrx rm
pcmpeq   00001111 : 011101gg : mod mmxrx rm
pcmpgt   00001111 : 011001gg : mod mmxrx rm
pmaddwd  00001111 : 11110101 : mod mmxrx rm
pmulhuw  00001111 : 11100100 : mod mmxrx rm
pmulhw   00001111 : 11100101 : mod mmxrx rm
pmullw   00001111 : 11010101 : mod mmxrx rm
por      00001111 : 11101011 : mod mmxrx rm
psll     00001111 : 111100gg : mod mmxrx rm
psll     00001111 : 011100gg : 11 110 mmxrx : imm8
psra     00001111 : 111000gg : mod mmxrx rm
psra     00001111 : 011100gg : 11 110 mmxrx : imm8
psub     00001111 : 111110gg : mod mmxrx rm
psubs    00001111 : 111110gg : mod mmxrx rm
psubus   00001111 : 110110gg : mod mmxrx rm
punpckh  00001111 : 011010gg : mod mmxrx rm
punpckl  00001111 : 011000gg : mod mmxrx rm
pxor     00001111 : 11101111 : mod mmxrx rm

# ------------------------------------------------------------------- #
# Processor extended state instruction formats
# ------------------------------------------------------------------- #

xgetbv   00001111 : 00000001 : 11010000
xsetbv   00001111 : 00000001 : 11010001
xrstor   00001111 : 10101110 : moda 101 rm
xsave    00001111 : 10101110 : moda 100 rm

# ------------------------------------------------------------------- #
# P6 family instruction formats and encodings
# ------------------------------------------------------------------- #

cmov    00001111 : 0100tttt : mod rx rm
